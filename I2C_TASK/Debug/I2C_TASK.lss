
I2C_TASK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  000004e4  00000558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000122f  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000094a  00000000  00000000  0000196f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ba6  00000000  00000000  000022b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  00002e60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000568  00000000  00000000  000030a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000721  00000000  00000000  00003608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00003d29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3b       	cpi	r26, 0xBC	; 188
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

#include "../ECUAL/EEPROM/EEPROM.h"
#include "../MCAL/UART/UART.h"

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	6b 97       	sbiw	r28, 0x1b	; 27
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	/* TWI Initialization */
	TWI_MasterInit();
  96:	0e 94 62 01 	call	0x2c4	; 0x2c4 <TWI_MasterInit>
	
	/* A character the return the data to read */
	uint8_t c;
	
	/* UART Initialization */
	UART_Init();
  9a:	0e 94 c3 01 	call	0x386	; 0x386 <UART_Init>
    while (1) 
    {
	/* Array to get the command */	
	uint8_t cmnd[7];
	
	UART_SendString(arr0);
  9e:	81 e6       	ldi	r24, 0x61	; 97
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <UART_SendString>
	UART_ReceiveString(cmnd,MAX_LEN);
  a6:	6f ef       	ldi	r22, 0xFF	; 255
  a8:	ce 01       	movw	r24, r28
  aa:	45 96       	adiw	r24, 0x15	; 21
  ac:	0e 94 1e 02 	call	0x43c	; 0x43c <UART_ReceiveString>
	
	/* Write command is selected */
	if(!strcmp(cmnd,"WRITE\r"))
  b0:	63 e8       	ldi	r22, 0x83	; 131
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	ce 01       	movw	r24, r28
  b6:	45 96       	adiw	r24, 0x15	; 21
  b8:	0e 94 67 02 	call	0x4ce	; 0x4ce <strcmp>
  bc:	89 2b       	or	r24, r25
  be:	09 f0       	breq	.+2      	; 0xc2 <main+0x40>
  c0:	5b c0       	rjmp	.+182    	; 0x178 <main+0xf6>
	{
	/* Getting the address from the user */	
	UART_SendString(arr_OK);
  c2:	8a e8       	ldi	r24, 0x8A	; 138
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <UART_SendString>
	UART_SendString(arr1);
  ca:	8e e8       	ldi	r24, 0x8E	; 142
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <UART_SendString>
	UART_ReceiveString(x,MAX_LEN);
  d2:	6f ef       	ldi	r22, 0xFF	; 255
  d4:	ce 01       	movw	r24, r28
  d6:	02 96       	adiw	r24, 0x02	; 2
  d8:	0e 94 1e 02 	call	0x43c	; 0x43c <UART_ReceiveString>
	
	/* Convert the string of the address */
	uint8_t i=0;
	while(x[i] != '\r')
  dc:	9a 81       	ldd	r25, Y+2	; 0x02
  de:	9d 30       	cpi	r25, 0x0D	; 13
  e0:	71 f1       	breq	.+92     	; 0x13e <main+0xbc>
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	10 e0       	ldi	r17, 0x00	; 0
	{
		if(x[i]=='1')
  e6:	91 33       	cpi	r25, 0x31	; 49
  e8:	f9 f4       	brne	.+62     	; 0x128 <main+0xa6>
		{
			if(i==0)
  ea:	81 11       	cpse	r24, r1
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <main+0x70>
			{
				res=res+128;
  ee:	10 58       	subi	r17, 0x80	; 128
  f0:	1b c0       	rjmp	.+54     	; 0x128 <main+0xa6>
			}else if(i==1)
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	11 f4       	brne	.+4      	; 0xfa <main+0x78>
			{
				res=res+64;
  f6:	10 5c       	subi	r17, 0xC0	; 192
  f8:	17 c0       	rjmp	.+46     	; 0x128 <main+0xa6>
			}else if(i==2)
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	11 f4       	brne	.+4      	; 0x102 <main+0x80>
			{
				res=res+32;
  fe:	10 5e       	subi	r17, 0xE0	; 224
 100:	13 c0       	rjmp	.+38     	; 0x128 <main+0xa6>
			}else if(i==3)
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	11 f4       	brne	.+4      	; 0x10a <main+0x88>
			{
				res=res+16;
 106:	10 5f       	subi	r17, 0xF0	; 240
 108:	0f c0       	rjmp	.+30     	; 0x128 <main+0xa6>
			}else if(i==4)
 10a:	84 30       	cpi	r24, 0x04	; 4
 10c:	11 f4       	brne	.+4      	; 0x112 <main+0x90>
			{
				res=res+8;
 10e:	18 5f       	subi	r17, 0xF8	; 248
 110:	0b c0       	rjmp	.+22     	; 0x128 <main+0xa6>
			}else if(i==5)
 112:	85 30       	cpi	r24, 0x05	; 5
 114:	11 f4       	brne	.+4      	; 0x11a <main+0x98>
			{
				res=res+4;
 116:	1c 5f       	subi	r17, 0xFC	; 252
 118:	07 c0       	rjmp	.+14     	; 0x128 <main+0xa6>
			}else if(i==6)
 11a:	86 30       	cpi	r24, 0x06	; 6
 11c:	11 f4       	brne	.+4      	; 0x122 <main+0xa0>
			{
				res=res+2;
 11e:	1e 5f       	subi	r17, 0xFE	; 254
 120:	03 c0       	rjmp	.+6      	; 0x128 <main+0xa6>
			}else if(i==7)
 122:	87 30       	cpi	r24, 0x07	; 7
 124:	09 f4       	brne	.+2      	; 0x128 <main+0xa6>
			{
				res=res+1;
 126:	1f 5f       	subi	r17, 0xFF	; 255
			}
		}
		i++;
 128:	8f 5f       	subi	r24, 0xFF	; 255
	UART_SendString(arr1);
	UART_ReceiveString(x,MAX_LEN);
	
	/* Convert the string of the address */
	uint8_t i=0;
	while(x[i] != '\r')
 12a:	e2 e0       	ldi	r30, 0x02	; 2
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	ec 0f       	add	r30, r28
 130:	fd 1f       	adc	r31, r29
 132:	e8 0f       	add	r30, r24
 134:	f1 1d       	adc	r31, r1
 136:	90 81       	ld	r25, Z
 138:	9d 30       	cpi	r25, 0x0D	; 13
 13a:	a9 f6       	brne	.-86     	; 0xe6 <main+0x64>
 13c:	01 c0       	rjmp	.+2      	; 0x140 <main+0xbe>
 13e:	10 e0       	ldi	r17, 0x00	; 0
		}
		i++;
	}
	
	/* Getting the data to write */
	UART_SendString(arr_OK);
 140:	8a e8       	ldi	r24, 0x8A	; 138
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <UART_SendString>
	UART_SendString(arr2);
 148:	83 ea       	ldi	r24, 0xA3	; 163
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <UART_SendString>
	UART_ReceiveData(&dat);
 150:	ce 01       	movw	r24, r28
 152:	44 96       	adiw	r24, 0x14	; 20
 154:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <UART_ReceiveData>
	EEPROM_WRITE(res,dat);
 158:	6c 89       	ldd	r22, Y+20	; 0x14
 15a:	81 2f       	mov	r24, r17
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 13 01 	call	0x226	; 0x226 <EEPROM_WRITE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	8f e3       	ldi	r24, 0x3F	; 63
 164:	9c e9       	ldi	r25, 0x9C	; 156
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <main+0xe4>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0xea>
 16c:	00 00       	nop
	_delay_ms(20);	
	UART_SendData('\r');
 16e:	8d e0       	ldi	r24, 0x0D	; 13
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 db 01 	call	0x3b6	; 0x3b6 <UART_SendData>
 176:	93 cf       	rjmp	.-218    	; 0x9e <main+0x1c>
	res=0;
	/* Read command is selected */
	}else if(!strcmp(cmnd,"READ\r"))
 178:	65 eb       	ldi	r22, 0xB5	; 181
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	ce 01       	movw	r24, r28
 17e:	45 96       	adiw	r24, 0x15	; 21
 180:	0e 94 67 02 	call	0x4ce	; 0x4ce <strcmp>
 184:	89 2b       	or	r24, r25
 186:	09 f0       	breq	.+2      	; 0x18a <main+0x108>
 188:	8a cf       	rjmp	.-236    	; 0x9e <main+0x1c>
	{
	/* Getting the address location of the data to read */	
	UART_SendString(arr_OK);
 18a:	8a e8       	ldi	r24, 0x8A	; 138
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <UART_SendString>
	UART_SendString(arr1);
 192:	8e e8       	ldi	r24, 0x8E	; 142
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <UART_SendString>
	UART_ReceiveString(x1,MAX_LEN);
 19a:	6f ef       	ldi	r22, 0xFF	; 255
 19c:	ce 01       	movw	r24, r28
 19e:	0b 96       	adiw	r24, 0x0b	; 11
 1a0:	0e 94 1e 02 	call	0x43c	; 0x43c <UART_ReceiveString>
	uint8_t i=0;
	while(x1[i] != '\r')
 1a4:	2b 85       	ldd	r18, Y+11	; 0x0b
 1a6:	2d 30       	cpi	r18, 0x0D	; 13
 1a8:	71 f1       	breq	.+92     	; 0x206 <main+0x184>
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(x1[i]=='1')
 1ae:	21 33       	cpi	r18, 0x31	; 49
 1b0:	f9 f4       	brne	.+62     	; 0x1f0 <main+0x16e>
		{
			if(i==0)
 1b2:	91 11       	cpse	r25, r1
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <main+0x138>
			{
				res=res+128;
 1b6:	80 58       	subi	r24, 0x80	; 128
 1b8:	1b c0       	rjmp	.+54     	; 0x1f0 <main+0x16e>
			}else if(i==1)
 1ba:	91 30       	cpi	r25, 0x01	; 1
 1bc:	11 f4       	brne	.+4      	; 0x1c2 <main+0x140>
			{
				res=res+64;
 1be:	80 5c       	subi	r24, 0xC0	; 192
 1c0:	17 c0       	rjmp	.+46     	; 0x1f0 <main+0x16e>
			}else if(i==2)
 1c2:	92 30       	cpi	r25, 0x02	; 2
 1c4:	11 f4       	brne	.+4      	; 0x1ca <main+0x148>
			{
				res=res+32;
 1c6:	80 5e       	subi	r24, 0xE0	; 224
 1c8:	13 c0       	rjmp	.+38     	; 0x1f0 <main+0x16e>
			}else if(i==3)
 1ca:	93 30       	cpi	r25, 0x03	; 3
 1cc:	11 f4       	brne	.+4      	; 0x1d2 <main+0x150>
			{
				res=res+16;
 1ce:	80 5f       	subi	r24, 0xF0	; 240
 1d0:	0f c0       	rjmp	.+30     	; 0x1f0 <main+0x16e>
			}else if(i==4)
 1d2:	94 30       	cpi	r25, 0x04	; 4
 1d4:	11 f4       	brne	.+4      	; 0x1da <main+0x158>
			{
				res=res+8;
 1d6:	88 5f       	subi	r24, 0xF8	; 248
 1d8:	0b c0       	rjmp	.+22     	; 0x1f0 <main+0x16e>
			}else if(i==5)
 1da:	95 30       	cpi	r25, 0x05	; 5
 1dc:	11 f4       	brne	.+4      	; 0x1e2 <main+0x160>
			{
				res=res+4;
 1de:	8c 5f       	subi	r24, 0xFC	; 252
 1e0:	07 c0       	rjmp	.+14     	; 0x1f0 <main+0x16e>
			}else if(i==6)
 1e2:	96 30       	cpi	r25, 0x06	; 6
 1e4:	11 f4       	brne	.+4      	; 0x1ea <main+0x168>
			{
				res=res+2;
 1e6:	8e 5f       	subi	r24, 0xFE	; 254
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <main+0x16e>
			}else if(i==7)
 1ea:	97 30       	cpi	r25, 0x07	; 7
 1ec:	09 f4       	brne	.+2      	; 0x1f0 <main+0x16e>
			{
				res=res+1;
 1ee:	8f 5f       	subi	r24, 0xFF	; 255
			}
		}
		i++;
 1f0:	9f 5f       	subi	r25, 0xFF	; 255
	/* Getting the address location of the data to read */	
	UART_SendString(arr_OK);
	UART_SendString(arr1);
	UART_ReceiveString(x1,MAX_LEN);
	uint8_t i=0;
	while(x1[i] != '\r')
 1f2:	eb e0       	ldi	r30, 0x0B	; 11
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	ec 0f       	add	r30, r28
 1f8:	fd 1f       	adc	r31, r29
 1fa:	e9 0f       	add	r30, r25
 1fc:	f1 1d       	adc	r31, r1
 1fe:	20 81       	ld	r18, Z
 200:	2d 30       	cpi	r18, 0x0D	; 13
 202:	a9 f6       	brne	.-86     	; 0x1ae <main+0x12c>
 204:	01 c0       	rjmp	.+2      	; 0x208 <main+0x186>
 206:	80 e0       	ldi	r24, 0x00	; 0
		}
		i++;
	}
	
	/* Returning the data */	
	EEPROM_READ(res,&c);
 208:	be 01       	movw	r22, r28
 20a:	6f 5f       	subi	r22, 0xFF	; 255
 20c:	7f 4f       	sbci	r23, 0xFF	; 255
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 32 01 	call	0x264	; 0x264 <EEPROM_READ>
	UART_SendData(c);
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 db 01 	call	0x3b6	; 0x3b6 <UART_SendData>

	UART_SendData('\r');
 21c:	8d e0       	ldi	r24, 0x0D	; 13
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 db 01 	call	0x3b6	; 0x3b6 <UART_SendData>
	res=0;
	}

		
    }
 224:	3c cf       	rjmp	.-392    	; 0x9e <main+0x1c>

00000226 <EEPROM_WRITE>:
 *  Author: DELLL
 */ 

#include "EEPROM.h"
enuErrorStatus_t EEPROM_WRITE(uint16_t addr,uint8_t data)
{
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	ec 01       	movw	r28, r24
 22e:	16 2f       	mov	r17, r22
	uint8_t var = (uint8_t)((0xA0)|((addr&0x0700)>>7));
	TWI_StartCondition();
 230:	0e 94 71 01 	call	0x2e2	; 0x2e2 <TWI_StartCondition>

	TWI_WriteToAddress(var);
 234:	ce 01       	movw	r24, r28
 236:	88 27       	eor	r24, r24
 238:	97 70       	andi	r25, 0x07	; 7
 23a:	88 0f       	add	r24, r24
 23c:	89 2f       	mov	r24, r25
 23e:	88 1f       	adc	r24, r24
 240:	99 0b       	sbc	r25, r25
 242:	91 95       	neg	r25
 244:	80 6a       	ori	r24, 0xA0	; 160
 246:	0e 94 81 01 	call	0x302	; 0x302 <TWI_WriteToAddress>

	TWI_WriteData((uint8_t)addr);
 24a:	8c 2f       	mov	r24, r28
 24c:	0e 94 9b 01 	call	0x336	; 0x336 <TWI_WriteData>

	TWI_WriteData(data);
 250:	81 2f       	mov	r24, r17
 252:	0e 94 9b 01 	call	0x336	; 0x336 <TWI_WriteData>

	TWI_StopCondition();
 256:	0e 94 7d 01 	call	0x2fa	; 0x2fa <TWI_StopCondition>
	return E_OK;
}
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	08 95       	ret

00000264 <EEPROM_READ>:

enuErrorStatus_t EEPROM_READ(uint16_t addr,uint8_t* ptr)
{
 264:	ef 92       	push	r14
 266:	ff 92       	push	r15
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	8c 01       	movw	r16, r24
 270:	7b 01       	movw	r14, r22
	uint8_t var = (uint8_t)((0xA0)|((addr&0x0700)>>7));
 272:	88 27       	eor	r24, r24
 274:	97 70       	andi	r25, 0x07	; 7
 276:	88 0f       	add	r24, r24
 278:	89 2f       	mov	r24, r25
 27a:	88 1f       	adc	r24, r24
 27c:	99 0b       	sbc	r25, r25
 27e:	91 95       	neg	r25
 280:	c8 2f       	mov	r28, r24
 282:	c0 6a       	ori	r28, 0xA0	; 160
	TWI_StartCondition();
 284:	0e 94 71 01 	call	0x2e2	; 0x2e2 <TWI_StartCondition>

	TWI_WriteToAddress(var);
 288:	8c 2f       	mov	r24, r28
 28a:	0e 94 81 01 	call	0x302	; 0x302 <TWI_WriteToAddress>

	TWI_WriteData((uint8_t)addr);
 28e:	80 2f       	mov	r24, r16
 290:	0e 94 9b 01 	call	0x336	; 0x336 <TWI_WriteData>

	TWI_RepeatedStart();
 294:	0e 94 b7 01 	call	0x36e	; 0x36e <TWI_RepeatedStart>

	var++;
	TWI_ReadFromAddress(var);
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	8c 0f       	add	r24, r28
 29c:	0e 94 8e 01 	call	0x31c	; 0x31c <TWI_ReadFromAddress>
 2a0:	8f e1       	ldi	r24, 0x1F	; 31
 2a2:	9e e4       	ldi	r25, 0x4E	; 78
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <EEPROM_READ+0x40>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <EEPROM_READ+0x46>
 2aa:	00 00       	nop

	_delay_ms(10);
	TWI_ReadData(ptr);
 2ac:	c7 01       	movw	r24, r14
 2ae:	0e 94 a8 01 	call	0x350	; 0x350 <TWI_ReadData>

	TWI_StopCondition();
 2b2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <TWI_StopCondition>
	
	return E_OK;
}
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	ff 90       	pop	r15
 2c0:	ef 90       	pop	r14
 2c2:	08 95       	ret

000002c4 <TWI_MasterInit>:
	TWDR_R = data;
	TWCR_R = (1<<TWINT_B)|(1<<TWEN_B);
	while(!GET_BIT(TWCR_R,TWINT_B));
	while((TWSR_R&0xF8) != 0xC0);
	return E_OK;
}
 2c4:	60 e4       	ldi	r22, 0x40	; 64
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	a9 01       	movw	r20, r18
 2d2:	0e 94 45 02 	call	0x48a	; 0x48a <__udivmodsi4>
 2d6:	20 b9       	out	0x00, r18	; 0
 2d8:	86 b7       	in	r24, 0x36	; 54
 2da:	84 60       	ori	r24, 0x04	; 4
 2dc:	86 bf       	out	0x36, r24	; 54
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	08 95       	ret

000002e2 <TWI_StartCondition>:
 2e2:	84 ea       	ldi	r24, 0xA4	; 164
 2e4:	86 bf       	out	0x36, r24	; 54
 2e6:	06 b6       	in	r0, 0x36	; 54
 2e8:	07 fe       	sbrs	r0, 7
 2ea:	fd cf       	rjmp	.-6      	; 0x2e6 <TWI_StartCondition+0x4>
 2ec:	91 b1       	in	r25, 0x01	; 1
 2ee:	98 7f       	andi	r25, 0xF8	; 248
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	98 30       	cpi	r25, 0x08	; 8
 2f4:	09 f4       	brne	.+2      	; 0x2f8 <TWI_StartCondition+0x16>
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	08 95       	ret

000002fa <TWI_StopCondition>:
 2fa:	84 e9       	ldi	r24, 0x94	; 148
 2fc:	86 bf       	out	0x36, r24	; 54
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	08 95       	ret

00000302 <TWI_WriteToAddress>:
 302:	83 b9       	out	0x03, r24	; 3
 304:	84 e8       	ldi	r24, 0x84	; 132
 306:	86 bf       	out	0x36, r24	; 54
 308:	06 b6       	in	r0, 0x36	; 54
 30a:	07 fe       	sbrs	r0, 7
 30c:	fd cf       	rjmp	.-6      	; 0x308 <TWI_WriteToAddress+0x6>
 30e:	91 b1       	in	r25, 0x01	; 1
 310:	98 7f       	andi	r25, 0xF8	; 248
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	98 31       	cpi	r25, 0x18	; 24
 316:	09 f4       	brne	.+2      	; 0x31a <TWI_WriteToAddress+0x18>
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	08 95       	ret

0000031c <TWI_ReadFromAddress>:
 31c:	83 b9       	out	0x03, r24	; 3
 31e:	84 e8       	ldi	r24, 0x84	; 132
 320:	86 bf       	out	0x36, r24	; 54
 322:	06 b6       	in	r0, 0x36	; 54
 324:	07 fe       	sbrs	r0, 7
 326:	fd cf       	rjmp	.-6      	; 0x322 <TWI_ReadFromAddress+0x6>
 328:	91 b1       	in	r25, 0x01	; 1
 32a:	98 7f       	andi	r25, 0xF8	; 248
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 34       	cpi	r25, 0x40	; 64
 330:	09 f4       	brne	.+2      	; 0x334 <TWI_ReadFromAddress+0x18>
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	08 95       	ret

00000336 <TWI_WriteData>:
 336:	83 b9       	out	0x03, r24	; 3
 338:	84 e8       	ldi	r24, 0x84	; 132
 33a:	86 bf       	out	0x36, r24	; 54
 33c:	06 b6       	in	r0, 0x36	; 54
 33e:	07 fe       	sbrs	r0, 7
 340:	fd cf       	rjmp	.-6      	; 0x33c <TWI_WriteData+0x6>
 342:	91 b1       	in	r25, 0x01	; 1
 344:	98 7f       	andi	r25, 0xF8	; 248
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	98 32       	cpi	r25, 0x28	; 40
 34a:	09 f4       	brne	.+2      	; 0x34e <TWI_WriteData+0x18>
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	08 95       	ret

00000350 <TWI_ReadData>:
 350:	24 e8       	ldi	r18, 0x84	; 132
 352:	26 bf       	out	0x36, r18	; 54
 354:	06 b6       	in	r0, 0x36	; 54
 356:	07 fe       	sbrs	r0, 7
 358:	fd cf       	rjmp	.-6      	; 0x354 <TWI_ReadData+0x4>
 35a:	23 b1       	in	r18, 0x03	; 3
 35c:	fc 01       	movw	r30, r24
 35e:	20 83       	st	Z, r18
 360:	91 b1       	in	r25, 0x01	; 1
 362:	98 7f       	andi	r25, 0xF8	; 248
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	98 35       	cpi	r25, 0x58	; 88
 368:	09 f4       	brne	.+2      	; 0x36c <TWI_ReadData+0x1c>
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	08 95       	ret

0000036e <TWI_RepeatedStart>:
* Return Value    : enuErrorStatus_t - For error handling
* Description     : Repeated start for changing the data direction
*************************************************************/
enuErrorStatus_t TWI_RepeatedStart(void)
{
	TWCR_R = (1<<TWINT_B)|(1<<TWSTA_B)|(1<<TWEN_B);
 36e:	84 ea       	ldi	r24, 0xA4	; 164
 370:	86 bf       	out	0x36, r24	; 54
	while(!GET_BIT(TWCR_R,TWINT_B));
 372:	06 b6       	in	r0, 0x36	; 54
 374:	07 fe       	sbrs	r0, 7
 376:	fd cf       	rjmp	.-6      	; 0x372 <TWI_RepeatedStart+0x4>
* Return Value    : uint8_t - for the status of the TWSR
* Description     : Get the status by checking the TWSR
*************************************************************/
uint8_t TWI_GetStatus(void)
{
	uint8_t status = TWSR_R&0xF8;
 378:	91 b1       	in	r25, 0x01	; 1
 37a:	98 7f       	andi	r25, 0xF8	; 248
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 31       	cpi	r25, 0x10	; 16
 380:	09 f4       	brne	.+2      	; 0x384 <TWI_RepeatedStart+0x16>
 382:	80 e0       	ldi	r24, 0x00	; 0
	if(TWI_GetStatus()!=REPEATED_S)
	{
		return E_ERROR;
	}
	return E_OK;
}
 384:	08 95       	ret

00000386 <UART_Init>:
	if(GET_BIT(UCSRA_R,RXC_B))
	{
		*pu16Data=UDR_R;
	}
	return gError;
}
 386:	10 bc       	out	0x20, r1	; 32
 388:	83 e3       	ldi	r24, 0x33	; 51
 38a:	89 b9       	out	0x09, r24	; 9
 38c:	88 e1       	ldi	r24, 0x18	; 24
 38e:	8a b9       	out	0x0a, r24	; 10
 390:	80 b5       	in	r24, 0x20	; 32
 392:	84 60       	ori	r24, 0x04	; 4
 394:	80 bd       	out	0x20, r24	; 32
 396:	80 b5       	in	r24, 0x20	; 32
 398:	82 60       	ori	r24, 0x02	; 2
 39a:	80 bd       	out	0x20, r24	; 32
 39c:	80 b5       	in	r24, 0x20	; 32
 39e:	8f 7d       	andi	r24, 0xDF	; 223
 3a0:	80 bd       	out	0x20, r24	; 32
 3a2:	80 b5       	in	r24, 0x20	; 32
 3a4:	8f 7e       	andi	r24, 0xEF	; 239
 3a6:	80 bd       	out	0x20, r24	; 32
 3a8:	80 b5       	in	r24, 0x20	; 32
 3aa:	87 7f       	andi	r24, 0xF7	; 247
 3ac:	80 bd       	out	0x20, r24	; 32
 3ae:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	08 95       	ret

000003b6 <UART_SendData>:
 3b6:	98 2f       	mov	r25, r24
 3b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 3bc:	81 30       	cpi	r24, 0x01	; 1
 3be:	39 f0       	breq	.+14     	; 0x3ce <UART_SendData+0x18>
 3c0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
 3c4:	5d 9b       	sbis	0x0b, 5	; 11
 3c6:	fe cf       	rjmp	.-4      	; 0x3c4 <UART_SendData+0xe>
 3c8:	9c b9       	out	0x0c, r25	; 12
 3ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 3ce:	08 95       	ret

000003d0 <UART_ReceiveData>:
 3d0:	fc 01       	movw	r30, r24
 3d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	51 f0       	breq	.+20     	; 0x3ee <UART_ReceiveData+0x1e>
 3da:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
 3de:	5f 9b       	sbis	0x0b, 7	; 11
 3e0:	fe cf       	rjmp	.-4      	; 0x3de <UART_ReceiveData+0xe>
 3e2:	2c b1       	in	r18, 0x0c	; 12
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	31 83       	std	Z+1, r19	; 0x01
 3e8:	20 83       	st	Z, r18
 3ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 3ee:	08 95       	ret

000003f0 <UART_SendString>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling 
* Description     : Sending a string with UART
*************************************************************/
enuErrorStatus_t UART_SendString(uint8_t* pu8String)
{
 3f0:	ef 92       	push	r14
 3f2:	ff 92       	push	r15
 3f4:	0f 93       	push	r16
 3f6:	1f 93       	push	r17
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	7c 01       	movw	r14, r24
	if(gError==E_ERROR)
 3fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 402:	81 30       	cpi	r24, 0x01	; 1
 404:	a1 f0       	breq	.+40     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	{
		return E_ERROR;
	}
	gError=E_OK;
 406:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
 40a:	e7 01       	movw	r28, r14
 40c:	8f ef       	ldi	r24, 0xFF	; 255
 40e:	e8 0e       	add	r14, r24
 410:	f1 1c       	adc	r15, r1
 412:	8e 01       	movw	r16, r28
	uint8_t i=0;
	for(i=0;i<MAX_LEN;i++)
	{
		UART_SendData(pu8String[i]);
 414:	89 91       	ld	r24, Y+
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 db 01 	call	0x3b6	; 0x3b6 <UART_SendData>
		if(pu8String[i]=='\r')
 41c:	f8 01       	movw	r30, r16
 41e:	90 81       	ld	r25, Z
 420:	9d 30       	cpi	r25, 0x0D	; 13
 422:	19 f0       	breq	.+6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	{
		return E_ERROR;
	}
	gError=E_OK;
	uint8_t i=0;
	for(i=0;i<MAX_LEN;i++)
 424:	ce 15       	cp	r28, r14
 426:	df 05       	cpc	r29, r15
 428:	a1 f7       	brne	.-24     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		if(pu8String[i]=='\r')
		{
			break;
		}		
	}
	return gError;
 42a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
}
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	ff 90       	pop	r15
 438:	ef 90       	pop	r14
 43a:	08 95       	ret

0000043c <UART_ReceiveString>:
* Parameters (out): pu8String
* Return Value    : enuErrorStatus_t - For error handling 
* Description     : Sending a string with UART
*************************************************************/
enuErrorStatus_t UART_ReceiveString(uint8_t* pu8String,uint8_t max_length)
{
 43c:	0f 93       	push	r16
 43e:	1f 93       	push	r17
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
	if(gError==E_ERROR)
 444:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 448:	21 30       	cpi	r18, 0x01	; 1
 44a:	c9 f0       	breq	.+50     	; 0x47e <UART_ReceiveString+0x42>
	{
		return E_ERROR;
	}
	gError=E_OK;
 44c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
	uint8_t i=0;
	for(i=0;i<max_length;i++)
 450:	66 23       	and	r22, r22
 452:	99 f0       	breq	.+38     	; 0x47a <UART_ReceiveString+0x3e>
 454:	ec 01       	movw	r28, r24
 456:	61 50       	subi	r22, 0x01	; 1
 458:	06 2f       	mov	r16, r22
 45a:	10 e0       	ldi	r17, 0x00	; 0
 45c:	0f 5f       	subi	r16, 0xFF	; 255
 45e:	1f 4f       	sbci	r17, 0xFF	; 255
 460:	08 0f       	add	r16, r24
 462:	19 1f       	adc	r17, r25
	{
		UART_ReceiveData(&pu8String[i]);
 464:	ce 01       	movw	r24, r28
 466:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <UART_ReceiveData>
		if((pu8String[i]=='\r')||(pu8String[i]=='\n'))
 46a:	99 91       	ld	r25, Y+
 46c:	9d 30       	cpi	r25, 0x0D	; 13
 46e:	29 f0       	breq	.+10     	; 0x47a <UART_ReceiveString+0x3e>
 470:	9a 30       	cpi	r25, 0x0A	; 10
 472:	19 f0       	breq	.+6      	; 0x47a <UART_ReceiveString+0x3e>
	{
		return E_ERROR;
	}
	gError=E_OK;
	uint8_t i=0;
	for(i=0;i<max_length;i++)
 474:	c0 17       	cp	r28, r16
 476:	d1 07       	cpc	r29, r17
 478:	a9 f7       	brne	.-22     	; 0x464 <UART_ReceiveString+0x28>
		/*if(pu8String[6]=='\r')
		{
			DIO_Write(4,HIGH);
		}*/

	return gError;
 47a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
}
 47e:	82 2f       	mov	r24, r18
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	1f 91       	pop	r17
 486:	0f 91       	pop	r16
 488:	08 95       	ret

0000048a <__udivmodsi4>:
 48a:	a1 e2       	ldi	r26, 0x21	; 33
 48c:	1a 2e       	mov	r1, r26
 48e:	aa 1b       	sub	r26, r26
 490:	bb 1b       	sub	r27, r27
 492:	fd 01       	movw	r30, r26
 494:	0d c0       	rjmp	.+26     	; 0x4b0 <__udivmodsi4_ep>

00000496 <__udivmodsi4_loop>:
 496:	aa 1f       	adc	r26, r26
 498:	bb 1f       	adc	r27, r27
 49a:	ee 1f       	adc	r30, r30
 49c:	ff 1f       	adc	r31, r31
 49e:	a2 17       	cp	r26, r18
 4a0:	b3 07       	cpc	r27, r19
 4a2:	e4 07       	cpc	r30, r20
 4a4:	f5 07       	cpc	r31, r21
 4a6:	20 f0       	brcs	.+8      	; 0x4b0 <__udivmodsi4_ep>
 4a8:	a2 1b       	sub	r26, r18
 4aa:	b3 0b       	sbc	r27, r19
 4ac:	e4 0b       	sbc	r30, r20
 4ae:	f5 0b       	sbc	r31, r21

000004b0 <__udivmodsi4_ep>:
 4b0:	66 1f       	adc	r22, r22
 4b2:	77 1f       	adc	r23, r23
 4b4:	88 1f       	adc	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	1a 94       	dec	r1
 4ba:	69 f7       	brne	.-38     	; 0x496 <__udivmodsi4_loop>
 4bc:	60 95       	com	r22
 4be:	70 95       	com	r23
 4c0:	80 95       	com	r24
 4c2:	90 95       	com	r25
 4c4:	9b 01       	movw	r18, r22
 4c6:	ac 01       	movw	r20, r24
 4c8:	bd 01       	movw	r22, r26
 4ca:	cf 01       	movw	r24, r30
 4cc:	08 95       	ret

000004ce <strcmp>:
 4ce:	fb 01       	movw	r30, r22
 4d0:	dc 01       	movw	r26, r24
 4d2:	8d 91       	ld	r24, X+
 4d4:	01 90       	ld	r0, Z+
 4d6:	80 19       	sub	r24, r0
 4d8:	01 10       	cpse	r0, r1
 4da:	d9 f3       	breq	.-10     	; 0x4d2 <strcmp+0x4>
 4dc:	99 0b       	sbc	r25, r25
 4de:	08 95       	ret

000004e0 <_exit>:
 4e0:	f8 94       	cli

000004e2 <__stop_program>:
 4e2:	ff cf       	rjmp	.-2      	; 0x4e2 <__stop_program>
